[gd_resource type="VisualShader" load_steps=13 format=3 uid="uid://drcbjbss62tm5"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_lka3i"]
parameter_name = "lineWidth"
qualifier = 2
hint = 1
default_value_enabled = true
default_value = 0.02

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_v0bq6"]
parameter_name = "lineOffset"
qualifier = 2

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_jdkse"]
size = Vector2(740, 560)
expression = "vec3 modulo = mod(floor(pos), 2.0);
float value = mod(modulo.x + modulo.y + modulo.z, 2.0);
vec3 primary = value * gridPrimaryColour;
vec3 secondary = (1.0 - value) * gridSecondaryColour;
vec3 color = primary + secondary;

vec2 grid_pos = mod(pos.xz + posOffset + 2.0 * 0.5, 2.0) / 2.0 - 0.5;
grid_pos = abs(grid_pos) * 2.0;
float line = min(step(lineWidth, grid_pos.x), step(lineWidth, grid_pos.y));

finalColour = mix(gridLineColour.rgb, color.rgb, line);"

[sub_resource type="VisualShaderNodeVaryingGetter" id="VisualShaderNodeVaryingGetter_yhbqe"]
varying_name = "WorldPos"
varying_type = 4

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_libgb"]
parameter_name = "gridPrimaryColour"
qualifier = 2
default_value_enabled = true

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_h7huj"]
parameter_name = "gridSecondaryColour"
qualifier = 2
default_value_enabled = true
default_value = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_2ylu5"]
parameter_name = "gridLineColour"
qualifier = 2
default_value_enabled = true
default_value = Color(0.176419, 0.176419, 0.176419, 1)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7cx0q"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_xeyod"]
input_name = "model_matrix"

[sub_resource type="VisualShaderNodeTransformVecMult" id="VisualShaderNodeTransformVecMult_walw8"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_nliw2"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVaryingSetter" id="VisualShaderNodeVaryingSetter_yp0o3"]
varying_name = "WorldPos"
varying_type = 4

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;


// Varyings
varying vec3 var_WorldPos;

instance uniform vec4 gridPrimaryColour : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);
instance uniform vec4 gridSecondaryColour : source_color = vec4(0.000000, 0.000000, 0.000000, 1.000000);
instance uniform vec4 gridLineColour : source_color = vec4(0.176419, 0.176419, 0.176419, 1.000000);
instance uniform float lineWidth : hint_range(0.0, 1.0) = 0.01999999955297;
instance uniform vec2 lineOffset;



void vertex() {
// Input:2
	mat4 n_out2p0 = MODEL_MATRIX;


// Input:4
	vec3 n_out4p0 = VERTEX;


// TransformVectorMult:3
	vec3 n_out3p0 = (n_out2p0 * vec4(n_out4p0, 1.0)).xyz;


// VaryingSetter:5
	var_WorldPos = n_out3p0;


}

void fragment() {
// ColorParameter:5
	vec4 n_out5p0 = gridPrimaryColour;


// ColorParameter:6
	vec4 n_out6p0 = gridSecondaryColour;


// ColorParameter:7
	vec4 n_out7p0 = gridLineColour;


// VaryingGetter:3
	vec3 n_out3p0 = var_WorldPos;


// Input:8
	vec2 n_out8p0 = UV;


// FloatParameter:10
	float n_out10p0 = lineWidth;


// Vector2Parameter:12
	vec2 n_out12p0 = lineOffset;


	vec3 n_out2p0;
// Expression:2
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 modulo = mod(floor(n_out3p0), 2.0);
		float value = mod(modulo.x + modulo.y + modulo.z, 2.0);
		vec3 primary = value * vec3(n_out5p0.xyz);
		vec3 secondary = (1.0 - value) * vec3(n_out6p0.xyz);
		vec3 color = primary + secondary;
		
		vec2 grid_pos = mod(n_out3p0.xz + n_out12p0 + 2.0 * 0.5, 2.0) / 2.0 - 0.5;
		grid_pos = abs(grid_pos) * 2.0;
		float line = min(step(n_out10p0, grid_pos.x), step(n_out10p0, grid_pos.y));
		
		n_out2p0 = mix(vec3(n_out7p0.xyz).rgb, color.rgb, line);
	}


// Output:0
	ALBEDO = n_out2p0;


}
"
varyings/WorldPos = "0,4"
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_xeyod")
nodes/vertex/2/position = Vector2(-1010.41, 324.039)
nodes/vertex/3/node = SubResource("VisualShaderNodeTransformVecMult_walw8")
nodes/vertex/3/position = Vector2(-640, 360)
nodes/vertex/4/node = SubResource("VisualShaderNodeInput_nliw2")
nodes/vertex/4/position = Vector2(-1020, 440)
nodes/vertex/5/node = SubResource("VisualShaderNodeVaryingSetter_yp0o3")
nodes/vertex/5/position = Vector2(-420, 400)
nodes/vertex/connections = PackedInt32Array(4, 0, 3, 1, 3, 0, 5, 0, 2, 0, 3, 0)
nodes/fragment/0/position = Vector2(160, 220)
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_jdkse")
nodes/fragment/2/position = Vector2(-600, 220)
nodes/fragment/2/size = Vector2(740, 560)
nodes/fragment/2/input_ports = "0,4,gridPrimaryColour;1,4,gridSecondaryColour;2,4,gridLineColour;3,4,pos;4,3,uv;5,0,lineWidth;6,3,posOffset;"
nodes/fragment/2/output_ports = "0,4,finalColour;"
nodes/fragment/2/expression = "vec3 modulo = mod(floor(pos), 2.0);
float value = mod(modulo.x + modulo.y + modulo.z, 2.0);
vec3 primary = value * gridPrimaryColour;
vec3 secondary = (1.0 - value) * gridSecondaryColour;
vec3 color = primary + secondary;

vec2 grid_pos = mod(pos.xz + posOffset + 2.0 * 0.5, 2.0) / 2.0 - 0.5;
grid_pos = abs(grid_pos) * 2.0;
float line = min(step(lineWidth, grid_pos.x), step(lineWidth, grid_pos.y));

finalColour = mix(gridLineColour.rgb, color.rgb, line);"
nodes/fragment/3/node = SubResource("VisualShaderNodeVaryingGetter_yhbqe")
nodes/fragment/3/position = Vector2(-1060, 440)
nodes/fragment/5/node = SubResource("VisualShaderNodeColorParameter_libgb")
nodes/fragment/5/position = Vector2(-1320, 120)
nodes/fragment/6/node = SubResource("VisualShaderNodeColorParameter_h7huj")
nodes/fragment/6/position = Vector2(-1060, 220)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorParameter_2ylu5")
nodes/fragment/7/position = Vector2(-1320, 340)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_7cx0q")
nodes/fragment/8/position = Vector2(-1060, 540)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatParameter_lka3i")
nodes/fragment/10/position = Vector2(-1320, 560)
nodes/fragment/12/node = SubResource("VisualShaderNodeVec2Parameter_v0bq6")
nodes/fragment/12/position = Vector2(-1320, 780)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 3, 5, 0, 2, 0, 6, 0, 2, 1, 7, 0, 2, 2, 8, 0, 2, 4, 10, 0, 2, 5, 12, 0, 2, 6)
